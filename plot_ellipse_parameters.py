import numpy as np
import matplotlib.pyplot as plt

def plot_ellipse_parameters(npz_file_pol_param,inc_polarization,save_figure = False):
    '''
    Function to plot the polarization parameters calculated with `calculate_pol_ellipse_parameters.py`
    It generates a figure containing the Degree of Polarization, Amplitude, 
    Tilt angle (gamma) and ellipticity angle (epsilon)


    Parameters
    ----------
    npz_file_pol_param : string
        Compressed NumPy file generated by calculate_pol_ellipse_parameters.py

    inc_polarization : integer (0 to 6)
        To indicate the incident polarization state. 
        The allowed values are as follows

        0 - unpolarized
        1,2- PLX, PLY (linearly polarized in x and y)
        3,4 - P45, M45 (linearly polarlized at 45 and -45 degrees)
        5,6 - RCP, LCP (right and left circularly polarized)

    save_figure : Boolean, optional
        To save the generated figure or not. The default is False.
        Note it saves a png and an svg file.

    Returns
    -------
    None.

    '''
    # set this to true so Matplotlib uses Latex to generate figure captions, labels, etc.
    plt.rcParams.update({
        "text.usetex": True
    })

    data = np.load(npz_file_pol_param)
    theta = data['theta']
    wl = data['wl']
    eps = data['all_eps']
    gamma = data['all_gamma']
    # all_a = data['all_a']
    # all_b = data['all_b']
    all_A = data['all_A']
    dop = data['all_dop']

    Nwl = len(wl)

    pol_name = ['Unpolarized','Linear X','Linear Y','+45 Linear','-45 Linear','Right Circular','Left Circular'][inc_polarization]

    fig,ax = plt.subplots(2,2, figsize = (15,15))

    all_ylabels = ['Degree of Polarization','Amplitude',
                   'Azimuth Angle ($^{\circ}$)','Ellipticity Angle ($^{\circ}$)']

    # Counter to decide which plot to do
    k = 0

    for curr_ax,curr_ylabel in zip(ax.ravel(),all_ylabels):
        
        curr_ax.set_ylabel(curr_ylabel, fontsize = 18)
        
        curr_ax.set_xlim(0,180)
        curr_ax.xaxis.set_ticks(np.arange(0,180+45,45))
        curr_ax.set_xlabel('Scattering Angle ($^{\circ}$)',fontsize = 18)
        
        curr_ax.grid(visible=True)
        
        if k == 0:        
            # Plot for DOP
            
            curr_ax.set_ylim(0,1.1)
            curr_ax.yaxis.set_ticks(np.arange(0,1.1,0.1))
            data_toplot = dop[inc_polarization,:,:]
            
        elif k == 1:
            # Plot for Amplitude
            
            curr_ax.set_yscale('log')
            data_toplot = all_A[inc_polarization,:,:]
            
        elif k == 2:
            # Plot for gamma
            
            curr_ax.set_ylim(0,180)
            curr_ax.yaxis.set_ticks(np.arange(0,180+45,45))
            data_toplot = gamma[inc_polarization,:,:]
            
        elif k == 3:
            # Plot for epsilon
            
            curr_ax.set_ylim(-45,45)
            curr_ax.yaxis.set_ticks(np.arange(-45,45+5,5))
            data_toplot = eps[inc_polarization,:,:]

        # plot for all wavelengths
        for wl_ind in range(Nwl):
            
            curr_ax.plot(theta,data_toplot[wl_ind,:],linewidth = 2)
            
        k = k + 1

    fig.suptitle('Polarization Properties for \n{}\nIncident Polarization: {}'.format(npz_file_pol_param,pol_name), fontsize = 18)    
    fig.legend(wl.tolist(),loc = 'right', title = 'Incident\nWavelength\n[$\mu$m]')


    if save_figure:    
        figure_name = npz_file_pol_param[0:-4] + '_' + pol_name
        fig.savefig(figure_name + '.svg')
        fig.savefig(figure_name + '.png', dpi = 200)
