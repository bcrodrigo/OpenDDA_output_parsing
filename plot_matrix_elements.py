import numpy as np
import matplotlib.pyplot as plt

def plot_mm_elements(npz_filename,save_figure = False):
    '''
    Function that plots the Normalized Mueller Matrix elements, previously
    averaged over orientations with `orientation_average.py`

    Parameters
    ----------
    npz_filename : string
        Compressed NumPy file generated by orientation_average.py
        
    save_figure : Boolean, optional
        To save the generated figure or not. The default is False.
        Note it saves a png and an svg file.

    Returns
    -------
    None.

    '''
    # set this to true so Matplotlib uses Latex to generate figure captions, labels, etc.
    plt.rcParams.update({
        "text.usetex": True
    })

    data = np.load(npz_filename)
    wl = data['wl']
    theta = data['theta']
    M_oavg = data['M_oavg']

    Nwl = len(wl)

    fig,ax = plt.subplots(4,4, figsize = (15,15))

    mm_element_list = ['$m_{11}$','$m_{12}$','$m_{13}$','$m_{14}$','$m_{21}$','$m_{22}$','$m_{23}$','$m_{24}$',
                     '$m_{31}$','$m_{32}$','$m_{33}$','$m_{34}$','$m_{41}$','$m_{42}$','$m_{43}$','$m_{44}$']

    element_indices = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2],[2,3],[3,0],[3,1],[3,2],[3,3]]

    for wl_ind in range(Nwl):
        
        m11 = M_oavg[wl_ind,:,0,0]
    
        for curr_ax,curr_mm,curr_element in zip(ax.ravel(),mm_element_list,element_indices):

            curr_ax.set_title(curr_mm)
            curr_ax.set_xlim(0,180)
            curr_ax.xaxis.set_ticks(np.arange(0,180+45,45))
            
            curr_ax.set_ylim(-1.1,1.1)
            curr_ax.yaxis.set_ticks(np.arange(-1,1.1,0.2))
            curr_ax.grid(visible = True)

            row = curr_element[0]
            col = curr_element[1]
            
            mvalue = M_oavg[wl_ind,:,row,col]/m11
            
            curr_ax.plot(theta,mvalue)

    fig.suptitle('Normalized Mueller Matrix Elements for \n{}'.format(npz_filename), fontsize = 18)

    fig.supxlabel('Scattering Angle (degrees)', y = 0.05, fontsize = 18)

    fig.legend(wl.tolist(),loc = 'right', title = 'Incident\nWavelength\n[$\mu$m]')

    if save_figure:    
        figure_name = 'MM_' + npz_filename[0:-4]
        fig.savefig(figure_name + '.svg')
        fig.savefig(figure_name + '.png', dpi = 200)

def plot_k_elements(npz_filename,save_figure = False):
    '''
    Function that plots the Extinction Matrix elements, previously
    averaged over orientations with `orientation_average.py`

    Parameters
    ----------
    npz_filename : string
        Compressed NumPy file generated by orientation_average.py

    save_figure : Boolean, optional
        To save the generated figure or not. The default is False.
        Note it saves a png and an svg file.

    Returns
    -------
    None.

    '''
    # set this to true so Matplotlib uses Latex to generate figure captions, labels, etc.
    plt.rcParams.update({
        "text.usetex": True
    })

    data = np.load(npz_filename)
    wl = data['wl']
    K_oavg = data['K_oavg']

    wl_min = min(wl)
    wl_max = max(wl)

    fig,ax = plt.subplots(4,4, figsize = (15,15))

    k_element_list = ['$K_{11}$','$K_{12}$','$K_{13}$','$K_{14}$','$K_{21}$','$K_{22}$','$K_{23}$','$K_{24}$',
                      '$K_{31}$','$K_{32}$','$K_{33}$','$K_{34}$','$K_{41}$','$K_{42}$','$K_{43}$','$K_{44}$']

    element_indices = [[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2],[2,3],[3,0],[3,1],[3,2],[3,3]]

    k11 = K_oavg[:,0,0]
    kmax = max(k11)

    for curr_ax,curr_k,curr_element in zip(ax.ravel(),k_element_list,element_indices):

        curr_ax.set_title(curr_k)
        curr_ax.set_xlim(wl_min,wl_max)
        curr_ax.set_ylim(-kmax,kmax)

        curr_ax.grid(visible = True)

        row = curr_element[0]
        col = curr_element[1]

        kvalue = K_oavg[:,row,col]

        curr_ax.plot(wl,kvalue)

    fig.suptitle('Extinction Matrix Elements for \n{}'.format(npz_filename), fontsize = 18)

    fig.supxlabel('Wavelength ($\mu$m)', y = 0.05, fontsize = 18)

    if save_figure:    
        figure_name = 'K_' + npz_filename[0:-4]
        fig.savefig(figure_name + '.svg')
        fig.savefig(figure_name + '.png', dpi = 200)